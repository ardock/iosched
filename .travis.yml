# Copyright 2014 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# This is a third party contribution without warranties and originally forked from Google IOSched.
#
#     https://github.com/google/iosched
#
# Google I/O is a developer conference held each year with two days of deep technical content.
# The Google I/O app is an open source project updated with material design and the Android 5.0 SDK.
# Their Android app supports devices running Android 4.0+ and contains an Android Wear integration.
# It is also a great design sample optimized for phones and tablets of all shapes and sizes.
# You can customize IOSched for your own conference or app. Further information can be found here.
#
#     https://github.com/google/iosched/blob/master/doc/CUSTOM.md
#
# Fork it and contribute!. If you find this file, contributions are also highly appreciated!.


# This is a configuration file for Travis CI specific to build Android SDK projects (Beta).
#
#     http://docs.travis-ci.com/user/languages/android/
#
# You have unlimited Build Minutes, Repositories and Collaborators but Concurrency can be limited.
# Reload the build when a background job (e.g. emulator) is killed or you see the error code 137.
# Avoid concurrency if this happens often or try to optimize your build and the resources usage.
# Travis-ci offers fair use for open source projects by free. They also offer other plans. Check it!
#
#     https://travis-ci.com/plans
#
# It's full commented. You can delete the extra comments or use only the parts that consider useful.
# .travis.yml can be very minimalistic but I added a lot of customization in it for new users as me.
# I'm not familiar with Yaml/Bash/Ruby syntax or fluent in English, so be careful and improve it!


language: android

jdk:
  # Check Travis JDKs: http://docs.travis-ci.com/user/languages/java/#Testing-Against-Multiple-JDKs
  # If 'jdk:' section is not found, Travis-ci use one jdk by default. You can comment out 'jdk:' and
  # test against more than one JDK: 'jdk' is combined with 'env' to construct a build matrix.
  # - openjdk7
  - oraclejdk7

android:
  components:
    # Check your project requirements and the components included by default on Travis-ci VM images.
    # Check required: https://github.com/google/iosched/blob/master/doc/BUILDING.md
    # Check defaults: http://docs.travis-ci.com/user/languages/android/#Pre-installed-components

    # Check Android SDK tools: http://developer.android.com/tools/sdk/tools-notes.html
    # Check Android SDK Platform-tools: http://developer.android.com/tools/revisions/platforms.html
    # Comment the lines below if the latest revisions of Android SDK Tools are included by default.
    # - tools
    # - platform-tools

    # Check BuildTools: http://developer.android.com/tools/revisions/build-tools.html
    # Comment the lines below if the BuildTools required for building your project are included.
    # - build-tools-20.0.0
    # - build-tools-21.0.2
    - build-tools-21.1.1

    # Check APIs: http://developer.android.com/guide/topics/manifest/uses-sdk-element.html#ApiLevels
    # Comment the lines below if the SDK versions used to compile your project are already included.
    # - android-20
    # - android-21

    # Check extras: http://developer.android.com/sdk/installing/adding-packages.html#GetSupportLib
    # Comment the lines below if the latest Android extras are included or not required.
    # - extra-android-m2repository
    # - extra-android-support

    # Check more extras: http://developer.android.com/sdk/installing/adding-packages.html#GetGoogle
    # Comment the lines below if the latest Google extras are included or not required.
    # - extra-google-m2repository
    # - extra-google-google_play_services

    # Check possible addons, you can use the commandline: android list sdk --no-ui --all --extended
    # Comment the lines below if the latest Google apis addons are included or not required.
    # - addon-google_apis-google-21

    # Check get tools: http://developer.android.com/sdk/installing/adding-packages.html#GetTools
    # Comment the lines below if the latest images are included or you don't need to run emulator/s.
    # - sys-img-x86-android-21
    # - sys-img-x86_64-android-21
    #- sys-img-armeabi-v7a-addon-google_apis-google-21
    # - sys-img-armeabi-v7a-android-21
    # - sys-img-armeabi-v7a-android-wear-20

  licenses:
    # Check licenses: http://docs.travis-ci.com/user/languages/android/#Dealing-with-Licenses
    # By default Travis will accept all the licenses, but it's also possible to define a white list:
    # White list current android-sdk-license revision.
    - 'android-sdk-license-5be876d5'
    # White list all android-sdk-license revisions.
    # - 'android-sdk-license-.+'
    # White list all the licenses.
    # - '.+'

notifications:
  email: false

env:
  matrix:
    # Travis CI will run your tests against a matrix of all possible combinations (including 'jdk').
    # For Android projects, env and jdk can be given as arrays to construct a build matrix.
    # Check the build matrix: http://docs.travis-ci.com/user/build-configuration/#The-Build-Matrix
    # - AVD_TARGET=android-15  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''
    # - AVD_TARGET=android-16  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''
    # - AVD_TARGET=android-17  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''
    # - AVD_TARGET=android-18  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''
    # - AVD_TARGET=android-19  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''
    # - AVD_TARGET=android-21  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS=''

    # Disable pre-dexing improves performance on CI build servers (see below).
    - AVD_TARGET=android-15  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'
    - AVD_TARGET=android-16  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'
    - AVD_TARGET=android-17  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'
    - AVD_TARGET=android-18  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'
    - AVD_TARGET=android-19  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'
    - AVD_TARGET=android-21  AVD_ABI=armeabi-v7a  AVD_TAG=default  ARGS='-PdisablePreDex'

    # TODO: Work in progress... Test x86 and x86_64 ABIs allowing failure (see below).
    # - AVD_TARGET=android-21  AVD_ABI=x86  AVD_TAG=default  ARGS='-PdisablePreDex'
    # - AVD_TARGET=android-21  AVD_ABI=x86_64  AVD_TAG=default  ARGS='-PdisablePreDex'

    # TODO: Work in progress... Test google_apis allowing failure (see below).
    # - AVD_TARGET=android-21  AVD_ABI=armeabi-v7a  AVD_TAG=google_apis  ARGS='-PdisablePreDex'

    # TODO: Work in progress... Test android-wear allowing failure (see below).
    # - AVD_TARGET=android-20  AVD_ABI=armeabi-v7a  AVD_TAG=android-wear  ARGS='-PdisablePreDex'

matrix:
  # Check fast finishing - blog: http://blog.travis-ci.com/2013-11-27-fast-finishing-builds/
  # Check fast finishing - docs: http://docs.travis-ci.com/user/build-configuration/#Fast-finishing
  # Disabled until https://github.com/travis-ci/travis-ci/issues/1696 is fixed. Avoid notifications.
  # fast_finish: true

  # Check allow: http://docs.travis-ci.com/user/build-configuration/#Rows-That-are-Allowed-To-Fail
  # Allowed until we can set a less restrictive timeout on tests (android-studio 0.9.1 gradle 0.14+)
  # and we define minimum one test per module, otherwise test is failed since gradle 0.13.2.
  # TODO: Fix both issues and delete ignoreFailures for connectedAndroidTest on build.gradle files.
  # TODO: Work in progress... Test tags and abis for x86, x86_64, google_apis and android-wear.
  # allow_failures:
    # - env: AVD_TARGET=android-21  AVD_ABI=x86  AVD_TAG=default  ARGS='-PdisablePreDex'
    # - env: AVD_TARGET=android-21  AVD_ABI=x86_64  AVD_TAG=default  ARGS='-PdisablePreDex'
    # - env: AVD_TARGET=android-21  AVD_ABI=armeabi-v7a  AVD_TAG=google_apis  ARGS='-PdisablePreDex'
    # - env: AVD_TARGET=android-20  AVD_ABI=armeabi-v7a  AVD_TAG=android-wear  ARGS='-PdisablePreDex'


before_install:
  # Check Travis build lifecycle http://docs.travis-ci.com/user/build-configuration/#Build-Lifecycle
  # Travis CI uses virtual machine snapshotting to make sure no state is left between builds.
  # Check http://docs.travis-ci.com/user/customizing-the-build/#Customizing-the-Installation-Step

  # - echo 'FREE RESOURCES'
  # Stop unused services trying to avoid java.lang.OutOfMemoryError
  # Check issue: http://stackoverflow.com/questions/16789288
  # Check CI environment: http://docs.travis-ci.com/user/ci-environment/#Data-Stores
  # - ulimit -a
  - service --status-all
  - sudo service postgresql stop || true
  - sudo service mysql stop || true
  - sudo service memcached stop || true
  - sudo service elasticsearch stop || true
  - sudo service mongodb stop || true
  - sudo service rsync stop || true

  # - echo 'EXPORT VARIABLES'
  # Check Environment variables http://docs.travis-ci.com/user/ci-environment/#Environment-variables
  # Check bash syntax: http://www.gnu.org/software/bash/manual/bashref.html#Lists
  # Comment out the line below to export TERM=dumb for fix gradle output style.
  # - export TERM=dumb
  # Comment out the line below to custom the app module name. Required to show logs of your app.
  - export MOD_NAME=android
  # Comment out the line below to add Disable Pre-dexing option to build matrix and gradle commands.
  - 'if [[ "${ARGS:-}" == *-PdisablePreDex* ]]; then export DISABLE_PREDEX="-PdisablePreDex"; fi'
  # Comment out the line below to custom AVD name. Defaults to test if not used (:- ads default '').
  - 'export AVD_NAME="${AVD_TARGET}-${AVD_TAG:-default}-${AVD_ABI}-${RANDOM:-}${DISABLE_PREDEX:-}"'
  # Comment out the line below to custom the avd path. Defaults to avds/test if AVD_NAME is not set.
  - 'pwd; mkdir avds; export AVD_PATH="avds/${AVD_NAME:-test}"; echo "$AVD_PATH"'

  # - echo 'PREPARE DEPENDENCIES'
  # Use this to prepare the system to install prerequisites or dependencies e.g. sudo apt-get update
  # - sudo apt-get --yes --force-yes update || true
  # Comment out the lines below to show android SDK components, targets available and android home.
  # - android list sdk --no-ui --all --extended | grep -E '^id:' | awk -F '"' '{$1=""; print $2}'
  # - android list sdk --no-ui --all --extended || true
  # - android list targets || true
  - 'echo ${ANDROID_HOME}system-images/${AVD_TARGET}/${AVD_TAG}/${AVD_ABI}'
  # - 'ls ${ANDROID_HOME}system-images/${AVD_TARGET}/${AVD_TAG}/${AVD_ABI} -al'
  - 'cat ${ANDROID_HOME}system-images/${AVD_TARGET}/${AVD_TAG}/${AVD_ABI}/build.prop'
  # Comment out the lines below to check default android scripts and PATH
  - echo "$PATH"
  - ls /usr/local/bin -al
  - cat /usr/local/bin/android-accept-licenses
  - cat /usr/local/bin/android-update-sdk
  - cat /usr/local/bin/android-wait-for-emulator


install:
  # - echo 'SKIP INSTALL STAGE'
  # Check install section: http://docs.travis-ci.com/user/build-configuration/#install
  # If you'd like to skip the install stage entirely, set it to true and nothing will be run.
  # - true

  # - echo 'INSTALL DEPENDENCIES'
  # Otherwise use this to install any prerequisites or dependencies necessary to run your build.
  - 'if [[ "${AVD_ABI:-}" == *x86* ]]; then sudo apt-get --yes --force-yes install kvm; ls /dev/kvm -al || true ; fi'

  # - echo 'CREATE & START AVD'
  # Check manage avds: http://developer.android.com/tools/devices/managing-avds-cmdline.html
  # Check android create avd: http://developer.android.com/tools/help/android.html
  # TODO: Revise bash syntax used here. Add -d "Android Wear Round" -s AndroidWearRound for wear.
  - 'echo no | android create avd --force -n ${AVD_NAME:-test} -t $AVD_TARGET -b $AVD_ABI -g ${AVD_TAG:-default} -p ${AVD_PATH:-.}'
  # TODO: Add support for multiple avds, so we can test mobile and wearable at the same time.
  - 'pwd; ls "${AVD_PATH:-.}" -al; echo " CONFIG"; echo "========"; cat "${AVD_PATH:-.}/config.ini"'
  # Check emulator: http://developer.android.com/tools/help/emulator.html#startup-options
  - 'emulator -avd ${AVD_NAME:-test} -no-skin -no-audio -no-window &'

  # - echo 'WAIT FOR DEVICE'
  # Check adb commands: http://developer.android.com/tools/help/adb.html
  # Comment out the line below to block execution until the emulator is online (device state).
  # TODO: Avoid emulator killed: - adb wait-for-device && adb devices && sleep 10
  - adb wait-for-device

  # - echo 'GRADLE WRAPPER'
  # Check Build with Gradle: http://developer.android.com/sdk/installing/studio-build.html
  # Comment out the line below to set executable permission to gradle, download it and show version.
  - chmod +x gradlew; ls -l gradlew; ./gradlew -version

  # - echo 'ANDROID DEPENDENCIES'
  # Travis-ci downloads gradle first time is called and it downloads the project dependencies.
  # Comment out the line below to download and show the android project dependencies.
  - ./gradlew androidDependencies

  # - echo 'CLEAN PROJECT'
  # Comment out the line below to prepare the Debug and DebugTest project sources.
  - ./gradlew clean generateDebugSources generateDebugTestSources

  # - echo 'BUILD PROJECT'
  # Comment out the line below to prepare the Debug and DebugTest project sources.
  - ./gradlew compileDebugSources compileDebugTestSources


before_script:
  # Use this to prepare your build for testing. You can also define scripts to be run before script.
  # Check http://docs.travis-ci.com/user/build-configuration/#before_script%2C-after_script

  # - echo 'WAIT FOR EMULATOR'
  # Check emulator help: http://developer.android.com/tools/help/emulator.html
  # Check key events reference: http://developer.android.com/reference/android/view/KeyEvent.html
  # TODO: Improve wait_for_emulator.sh script. Support more than one emulator simultaneously.
  # Comment out the lines below to execute the script and send input key constant 'Menu key'.
  - sudo chmod +x scripts/wait_for_emulator.sh; ./scripts/wait_for_emulator.sh
  - adb shell input keyevent 82 &

  # - echo 'LOGCAT'
  # Check logcat debug output: http://developer.android.com/tools/help/logcat.html
  # Check debugging log: http://developer.android.com/tools/debugging/debugging-log.html
  # Comment the lines belows to debug output and redirect it to a file. Custom tags for your app.
  - adb -e logcat *:W | tee logcat.log > /dev/null 2>&1 &

  # - echo 'SCRIPT'

script:
  # Added disable pre-dexing option to build matrix. Code checks if ARGS contains '-PdisablePreDex':
  # If $DISABLE_PREDEX option is added on gradlew, pre-dexing is disabled on build server.
  # Otherwise pre-dexing is enabled. It's the default option if ARGS or DISABLE_PREDEX is not found.
  # http://tools.android.com/tech-docs/new-build-system/tips#TOC-Improving-Build-Server-performance.

  # - echo 'DEFAULT TRAVIS BUILD'
  # By default Travis-ci execute './gradlew build connectedCheck' if no 'script:' section found.
  # Remember to add DISABLE_PREDEX flag always gradle tasks perform predex to avoid dexing errors.
  - ./gradlew build connectedCheck ${DISABLE_PREDEX:-}

  # OR

  # - echo 'BUILD DEBUG AND TEST'
  # Comment out the lines below to assemble the Debug build and the Test build for the Debug build
  # - ./gradlew assembleDebug ${DISABLE_PREDEX:-}
  # - ./gradlew assembleDebugTest ${DISABLE_PREDEX:-}
  # Comment out the line below to install and run tests for Build 'debug' on connected devices
  # - ./gradlew connectedAndroidTest ${DISABLE_PREDEX:-}

  # - echo 'BUILD RELEASE AND TEST'
  # Comment out the line below to prepare the Release project sources (predex wearable, be aware).
  # - ./gradlew generateReleaseSources ${DISABLE_PREDEX:-}
  # Comment out the line below to assemble this project for Build 'release'
  # - ./gradlew assembleRelease  ${DISABLE_PREDEX:-}
  # Comment out the line below to run all device checks on currently connected devices
  # - ./gradlew connectedCheck ${DISABLE_PREDEX:-}


after_failure:
  # - echo 'FAILURE'
  # Check apt configuration: http://docs.travis-ci.com/user/ci-environment/#apt-configuration
  # Comment out the lines below to show log about tests with app name customized on exports section.
  - sudo apt-get install -qq lynx
  - 'export LOG_DIR=`pwd`/${MOD_NAME}/build/outputs/reports/androidTests/connected/'
  - 'lynx --dump ${LOG_DIR}com.android.builder.testing.ConnectedDevice.html > myConnectedDevice.log'
  - 'lynx --dump ${LOG_DIR}com.android.builder.testing.html > myTesting.log'
  - 'for file in *.log; do echo "$file"; echo "====================="; cat "$file"; done || true'
  # TODO Fix dependencies and delete this
  - 'cat `pwd`/${MOD_NAME}/build/intermediates/tmp/dex/debug/libraryList.txt'

# after_success:
  # - echo 'SUCCESS'


after_script:
  # Check http://docs.travis-ci.com/user/build-configuration/#Build-Lifecycle
  # Test result is exported to TRAVIS_TEST_RESULT which you can use in commands run in after_script.
  # Standard Unix exit code of '0' means the build passed; everything else is treated as failure.
  # - 'if [[ "${TRAVIS_TEST_RESULT}" == "0" ]]; then echo "BUILD SUCCESSFUL"; else echo "ERROR"; fi'
  # Uncomment the line below to kill adb and show logcat output.
  - echo " LOGCAT "; echo "========"; cat logcat.log; pkill -KILL -f adb



  # @--@--@--@--@
  # @-- ERROR --@
  # @--@--@--@--@
  #
  # Error: Target id (android-21) is not valid. Use 'android list targets' to get the target ids.
  # @-- 132.1 --@ Add android-21 to android: components:
  #
  # Could not find any version that matches com.google.android.gms:play-services-wearable:6.1.+.
  # @-- 134.1 --@ Add extra-google-m2repository to android: components:
  #
  # Invalid --abi armeabi-v7a for the selected target. (android-21)
  # @-- 135.6 --@ Add tools to android: components:
  #
  # Manifest merger failed : uses-sdk:minSdkVersion 14 cannot be smaller than version L declared ...
  # @-- 137.1 --@ Add extra-android-m2repository to android: components:
  #
  # The command './gradlew build connectedCheck' exited with 137.
  # @-- 141.5 --@ Reload job or optimize build. killed by Travis. Check concurrent jobs, emulator...
  #
  # Failed to find Build Tools revision 21.0.2 (vm updating soon, and rev. 2.1 is published, update)
  # @-- 142.1 --@ Add build-tools-21.0.2 or better build-tools-21.1.1 to android: components:
  #
  # com.android.ddmlib.InstallException. connectedAndroidTest run tests failed, (exceed timeout).
  # @-- Issue: https://code.google.com/p/android/issues/detail?id=69735  (now optimize/reload job).
  # @-- 144.6 --@ Solution: https://android-review.googlesource.com/#/c/112780/ (inc. install time).
  #
  # emulator: WARNING: Could not initialize OpenglES emulation, using software renderer.
  # @-- Check: http://developer.android.com/tools/devices/emulator.html#starting
  # @-- 157.3 --@  You cannot run a VM-accelerated emulator inside another virtual machine. Can?.
  #
  # problem reading network stats ava.lang.IllegalStateException: problem parsing idx 1
  # at com.android.internal.net.NetworkStatsFactory.readNetworkStatsDetail(NetworkStatsFactory. 300)
  # @-- Check limitations: http://developer.android.com/tools/devices/emulator.html#limitations
  # @-- Check network :http://developer.android.com/tools/devices/emulator.html#emulatornetworking
  # @-- 180.1 --@ No support for determining network connected state.
  #
  # emulator: ERROR: x86 emulation currently requires hardware acceleration!
  # Please ensure KVM is properly installed and usable.
  # @-- 200.3 --@  CPU acceleration status: KVM is not installed (/dev/kvm is missing).
  #
  # Resource missing via repository com/android/support/support-v4/21.0.0/support-v4-21.0.0.pom ...
  # @-- 219.4 --@ Android and Google extras are downloaded via android SDK. Use components section.
  #
  # /home/travis/build.sh: line 41:  3281 Killed  emulator -avd ... -no-skin -no-audio -no-window
  # @-- 219.8 --@  Move other tasks to script and prepare emulator before script. No concurrent jobs
  #
  # Two Issues solved upgrading tools: https://code.google.com/p/android/issues/detail?id=77682
  # Gradle sync issue is fixed for Gradle 0.14.+ https://android-review.googlesource.com/#/c/111656/
  # Class loader issue fixed for A.Studio 0.8.14 https://android-review.googlesource.com/#/c/111741/
  # Check Android Gradle plugin 0.14.0+: http://tools.android.com/tech-docs/new-build-system
  # Requires Android Studio 0.9.0+ canary: http://tools.android.com/recent/androidstudio090released
  # Requires Build-Tools 21.1.0+, and Support repository rev 8.
  # Use quick fix button option but plugin APIs changed, so you may need to tweak your build files.
  # @-- 224.1 --@ Upgrade to Android Gradle plugin, 0.14.0+ and Android Studio 0.9.0+
  #
  # java.lang.ClassNotFoundException: android.support.v4.media.TransportMediatorJellybeanMR2
  # @-- Check source of response: http://stackoverflow.com/questions/23931388
  # @-- This is android.test.instrumentationtestrunner scanning every class in the apk.
  # @-- 249.2 --@ Some of the classes cannot be loaded. This is expected and not an issue.
  #
  # Error testing modules without tests, gradle 0.13.2+, connectedAndroidTest
  # When running connectedCheck and no tests are found, it should be considered a failure.
  # _FoundCompatibleDevices[TestRunner] FAILED. hasTests FAILED. No tests found.
  # Issue @-- https://code.google.com/p/android/issues/detail?id=76249
  # @-- Partial solution: https://android-review.googlesource.com/#/c/112529/
  # @-- Add tests or connectedAndroidTest.enabled=false on modules without tests or ignore failures:
  # @-- 249.3 --@ project.gradle.taskGraph.whenReady {connectedAndroidTest{ignoreFailures = true }}
  #
  # The command ... failed and exited with 137 during ...
  # @-- 250.1 --@ Reload job or optimize build. killed by Travis. Check concurrent jobs, emulator...
  #
  # No output has been received in the last 10 minutes ... indicates ...something wrong ...
  # @-- 253.1 --@ Travis CI killed the job, probably the emulator. Reload the job or optimize build.
  #
  # The command '... sudo apt-get update ...' failed and exited with 137 during .
  # @-- 254.5 --@ Travis CI killed the job. Reload job or try don't update it if is not required.
  #
  # Execution failed for preDexDebug. java.lang.OutOfMemoryError: unable to create new native thread
  # @-- 268.4 --@ Stop unused services like data stores before run the script, etc.
  #
  #
  # @--@--@--@--@
  # @-- TODO: --@
  # @--@--@--@--@
  #
  # Error Code: 127 com.android.ide.common.internal.LoggedErrorException :android:preDexDebug
  # @-- 135.5 --@ Reload job can solve the issue for a job but better optimize dependencies.
  # @-- 179.6 --@ Gradle Dependencies. Exclude unused or conflicting transitive dependencies.
  # /usr/local/android-sdk/build-tools/21.1.1/dx --dex --output
  #	/home/travis/build/.../iosched/android/build/intermediates/dex/debug --input-list=
  # /home/travis/build/.../iosched/android/build/intermediates/tmp/dex/debug/libraryList.txt
  # Error Code:137
  #
  # Downloading http://repo1.maven.org/maven2/ ... google-api-services-drive-v2-rev151-1.19.0.pom
  # Resource missing. ... com/android/support/support-v4/20.0.0/support-v4-20.0.0.pom]
  # Resource missing. ... com/android/support/support-v4/20.0.0/support-v4-20.0.0.jar]
  # Check http://stackoverflow.com/questions/26473929/android-gradle-dependency-resolution-order
  #
  # W/MediaScanner(  546): Error opening directory '/mnt/sdcard/', skipping: Permission denied.
  # E/ThrottleService(  278): Error reading data file
  # Check http://stackoverflow.com/questions/11788459/apps-not-running-on-android-emulator-device
  #
  # Error: Avoid non-default constructors in fragments: use a default constructor
  # plus Fragment#setArguments(Bundle) instead [ValidFragment]
  #
  # WARNING [Project: :android] WARNING: runProguard is deprecated (and will soon stop working);
  # change to 'minifyEnabled' instead
  #
  # LoggedErrorException: Failed to run command:  dex/debug libraryList.txt Error Code: 2 Output:
  # UNEXPECTED TOP-LEVEL EXCEPTION: com.android.dex.DexIndexOverflowException:
  # method ID not in [0, 0xffff]: 65536
  # Check classes.dex method count helper: https://gist.github.com/JakeWharton/6002797
  # apk= /path/to/android-debug.apk
  # unzip -p $apk classes.dex | head -c 92 | tail -c 4 | hexdump -e "1/4 '%d\n"'
  # TODO: Count by package. 32K Before changes, proguard on, release. 64k after, no proguard, debug.
  # TODO: Use proguard for all buids: https://github.com/pocorall/scaloid/issues/86
  # Check multiple dex file error: http://stackoverflow.com/questions/25984426
  # ./gradlew -q :android:dependencies
  # Check exclude module: http://stackoverflow.com/questions/25993974/
  # ./gradlew -q :android:dependencyInsight --dependency guava --configuration compile
  #
  # TODO: [] [] [] [] [] [] ?? Quiet output after upgrade to gradle plugin 0.14.2. Ignore it?
  #
  # TODO: Fix increased method count before adding multi-dex support.
  #
  # TODO: Add Multi-Dex support. Requires Build-Tools 21.1.0, and Support repository rev 8.
  # multiDexEnabled = true on defaultConfig, ProductFlavor, or BuildType, See multiDex samples.
  # Works for minSdkVersion 21+ (native) or <21 (legacy mode, com.android.support:multidex:1.0.0)
  #


